IMPORTANCE SAMPLING

Testing importance sampling for extensions projects
Very minimal implementation: quickly done, minimal changes to cosmosis code, not robust.

Try 'grep -R otavio' to see the modifications

---- HOW TO USE ----

1. Look into ./code directory and copy the modified files into cosmosis (pipeline.py and 2pt_like.py)
2. Run your favorite sampler with extra_output = ...  data_vector/2pt_theory
3. Run './setup_importance.sh output/your_chain.txt' to get a file with fixed header (this will generate a copy)
4. Setup params_importance.ini to read from this new fixed file. Make sure cosmosis reads values_importance.ini generated by setup_importance.sh
5. Run cosmosis params_importance.ini (the new output still includes the datavector)

----- MODIFICATIONS -----

1. Modified pipeline.py to allow extra_output to be anything,
and numpy.ndarrays are output as tsv.

But the output header still contains only 1 column name for
the extra param, not reflecting the number of columns added
by the datavector.

	For this first test, I fix this manually using a bash script (setup_importance.sh)
	data_vector--2pt_theory -> data_vector--2pt_theory_i,
	i = {1..len(n_columns - n_columns_header + 1)}

	This in Brazil would be called "gambiarra". Possible translations
	according to a dictionary are: McGyverism, workaround, alternative
	engineering.

2. In 2pt_like.py's function extract_theory_points(): if it finds
data_vector--2pt_theory_i values in the datablock, uses it. 

3. So, should have a values_importance.ini file including all
data_vector--2pt_theory_i as varied parameters, for the importance
sampler to include them in the datablock (the bash script also
generates this file).
